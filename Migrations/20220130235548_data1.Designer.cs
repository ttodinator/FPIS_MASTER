// <auto-generated />
using System;
using FPIS.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPIS.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220130235548_data1")]
    partial class data1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Broj", b =>
                {
                    b.Property<int>("PostanskiBroj")
                        .HasColumnType("int");

                    b.Property<int>("IDUlice")
                        .HasColumnType("int");

                    b.Property<int>("BrojAdrese")
                        .HasColumnType("int");

                    b.HasKey("PostanskiBroj", "IDUlice", "BrojAdrese");

                    b.HasIndex("IDUlice", "PostanskiBroj");

                    b.ToTable("Broj");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Delatnost", b =>
                {
                    b.Property<int>("SifraDel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SifraDel"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SifraDel");

                    b.ToTable("Delatnost");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Klijent", b =>
                {
                    b.Property<int>("IDKlijenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDKlijenta"), 1L, 1);

                    b.Property<int>("BrojAdrese")
                        .HasColumnType("int");

                    b.Property<int>("GodinaOsnivanja")
                        .HasColumnType("int");

                    b.Property<int>("IDPotKlijenta")
                        .HasColumnType("int");

                    b.Property<int>("IDUlice")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PIB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostanskiBroj")
                        .HasColumnType("int");

                    b.Property<int>("SifraDel")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebStrana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDKlijenta");

                    b.HasIndex("IDPotKlijenta");

                    b.HasIndex("SifraDel");

                    b.HasIndex("PostanskiBroj", "IDUlice", "BrojAdrese");

                    b.ToTable("Klijent");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Mesto", b =>
                {
                    b.Property<int>("PostanskiBroj")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostanskiBroj"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostanskiBroj");

                    b.ToTable("Mesto");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Operater", b =>
                {
                    b.Property<int>("IDOperatera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDOperatera"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDOperatera");

                    b.ToTable("Operater");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.OrganizacionaJedinica", b =>
                {
                    b.Property<int>("IDOrgJed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDOrgJed"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDOrgJed");

                    b.ToTable("OrganizacionaJedinica");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.PotencijalniKlijent", b =>
                {
                    b.Property<int>("IDPotKlijenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDPotKlijenta"), 1L, 1);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Napomena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZaposleniPrimaId")
                        .HasColumnType("int");

                    b.Property<int>("ZaposleniSaljeId")
                        .HasColumnType("int");

                    b.HasKey("IDPotKlijenta");

                    b.HasIndex("ZaposleniPrimaId");

                    b.HasIndex("ZaposleniSaljeId");

                    b.ToTable("PotencijalniKlijent");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Pozicija", b =>
                {
                    b.Property<int>("IDPoz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDPoz"), 1L, 1);

                    b.Property<int>("IDOrgJed")
                        .HasColumnType("int");

                    b.Property<int?>("IDPoz1")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDPoz");

                    b.HasIndex("IDOrgJed");

                    b.HasIndex("IDPoz1");

                    b.ToTable("Pozicija");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Ulica", b =>
                {
                    b.Property<int>("IDUlice")
                        .HasColumnType("int");

                    b.Property<int>("PostanskiBroj")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDUlice", "PostanskiBroj");

                    b.HasIndex("PostanskiBroj");

                    b.ToTable("Ulica");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.ZahtevZaPodacima", b =>
                {
                    b.Property<int>("IDZahteva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDZahteva"), 1L, 1);

                    b.Property<string>("BrSIMKartica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrZaposlenih")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IDKlijenta")
                        .HasColumnType("int");

                    b.Property<int>("IDOperatera")
                        .HasColumnType("int");

                    b.Property<int>("IDZap")
                        .HasColumnType("int");

                    b.HasKey("IDZahteva");

                    b.HasIndex("IDKlijenta");

                    b.HasIndex("IDOperatera");

                    b.HasIndex("IDZap")
                        .IsUnique();

                    b.ToTable("ZahtevZaPodacima");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Zaposleni", b =>
                {
                    b.Property<int>("IDZap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDZap"), 1L, 1);

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDZPoz")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDZap");

                    b.HasIndex("IDZPoz");

                    b.ToTable("Zaposleni");
                });

            modelBuilder.Entity("FPIS.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("FPIS.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CellphoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30d55154-6b70-4085-8469-3e56ebf836b5",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Petar",
                            PasswordHash = "AQAAAAEAACcQAAAAEODVu14OWEkf8LbuDHfAMVw2MjYhR29tjbORTyVi/49LuRVkgH2jXf6lJS4XjhP47g==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Surname = "Todic",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        });
                });

            modelBuilder.Entity("FPIS.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("FPIS.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LoginToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Broj", b =>
                {
                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Mesto", "Mesto")
                        .WithMany("Brojevi")
                        .HasForeignKey("PostanskiBroj")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Ulica", "Ulica")
                        .WithMany("Brojevi")
                        .HasForeignKey("IDUlice", "PostanskiBroj")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Mesto");

                    b.Navigation("Ulica");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Klijent", b =>
                {
                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.PotencijalniKlijent", "PotencijalniKlijent")
                        .WithMany()
                        .HasForeignKey("IDPotKlijenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Mesto", "Mesto")
                        .WithMany()
                        .HasForeignKey("PostanskiBroj")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Delatnost", "Delatnost")
                        .WithMany("Klijenti")
                        .HasForeignKey("SifraDel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Ulica", "Ulica")
                        .WithMany("Klijenti")
                        .HasForeignKey("PostanskiBroj", "IDUlice")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Broj", "Broj")
                        .WithMany("Klijenti")
                        .HasForeignKey("PostanskiBroj", "IDUlice", "BrojAdrese")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Broj");

                    b.Navigation("Delatnost");

                    b.Navigation("Mesto");

                    b.Navigation("PotencijalniKlijent");

                    b.Navigation("Ulica");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.PotencijalniKlijent", b =>
                {
                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Zaposleni", "ZaposleniPrima")
                        .WithMany("PotencijalniKlijentPrima")
                        .HasForeignKey("ZaposleniPrimaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Zaposleni", "ZaposleniSalje")
                        .WithMany("PotencijalniKlijentSalje")
                        .HasForeignKey("ZaposleniSaljeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ZaposleniPrima");

                    b.Navigation("ZaposleniSalje");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Pozicija", b =>
                {
                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.OrganizacionaJedinica", "OrganizacionaJedinica")
                        .WithMany("Pozicije")
                        .HasForeignKey("IDOrgJed")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Pozicija", "Pozicija1")
                        .WithMany("Pozicije")
                        .HasForeignKey("IDPoz1");

                    b.Navigation("OrganizacionaJedinica");

                    b.Navigation("Pozicija1");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Ulica", b =>
                {
                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Mesto", "Mesto")
                        .WithMany("Ulice")
                        .HasForeignKey("PostanskiBroj")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Mesto");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.ZahtevZaPodacima", b =>
                {
                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Klijent", "Klijent")
                        .WithMany("ZahteviZaPodacima")
                        .HasForeignKey("IDKlijenta");

                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Operater", "Operater")
                        .WithMany()
                        .HasForeignKey("IDOperatera")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Zaposleni", "Zaposleni")
                        .WithOne("zahtevZaPodacima")
                        .HasForeignKey("FPIS.Entities._1_Identifikacija_novih_klijenata.ZahtevZaPodacima", "IDZap")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klijent");

                    b.Navigation("Operater");

                    b.Navigation("Zaposleni");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Zaposleni", b =>
                {
                    b.HasOne("FPIS.Entities._1_Identifikacija_novih_klijenata.Pozicija", "Pozicija")
                        .WithMany("Zaposleni")
                        .HasForeignKey("IDZPoz")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pozicija");
                });

            modelBuilder.Entity("FPIS.Entities.AppUserRole", b =>
                {
                    b.HasOne("FPIS.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("FPIS.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FPIS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FPIS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FPIS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Broj", b =>
                {
                    b.Navigation("Klijenti");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Delatnost", b =>
                {
                    b.Navigation("Klijenti");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Klijent", b =>
                {
                    b.Navigation("ZahteviZaPodacima");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Mesto", b =>
                {
                    b.Navigation("Brojevi");

                    b.Navigation("Ulice");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.OrganizacionaJedinica", b =>
                {
                    b.Navigation("Pozicije");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Pozicija", b =>
                {
                    b.Navigation("Pozicije");

                    b.Navigation("Zaposleni");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Ulica", b =>
                {
                    b.Navigation("Brojevi");

                    b.Navigation("Klijenti");
                });

            modelBuilder.Entity("FPIS.Entities._1_Identifikacija_novih_klijenata.Zaposleni", b =>
                {
                    b.Navigation("PotencijalniKlijentPrima");

                    b.Navigation("PotencijalniKlijentSalje");

                    b.Navigation("zahtevZaPodacima")
                        .IsRequired();
                });

            modelBuilder.Entity("FPIS.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FPIS.Entities.AppUser", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
